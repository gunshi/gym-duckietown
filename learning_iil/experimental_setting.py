import numpy as np

SEED = 19048  # generated by Google Random Generator (1 - 50,000)

MAP_NAME = 'udem1'
MAP_STARTING_POSITIONS = [
    [(0.8, 0.0, 1.5), 10.90],
    [(0.8, 0.0, 2.5), 10.90],
    [(1.5, 0.0, 3.5), 12.56],
    [(2.5, 0.0, 3.5), 12.56],
    [(4.1, 0.0, 2.0), 14.14],
    [(2.8, 0.0, 0.8), 15.71],
]

# all with Dataset Aggregation
algorithms = ['supervised', 'dagger', 'aggrevate', 'safe_dagger', 'upms', 'upms-ne', 'upms-sl', 'upms-ne-sl']
model_names = ['ror_64_32', 'rom_64_32']
teacher_name = 'pure_pursuit'
optimization_methods = ['adam', 'adagrad', 'sgd']
learning_rates = [1e-3, 1e-4]

# Task Configuration
horizons = [128, 256, 512, 1024, 2048]
episodes = [64, 32, 16, 8, 4]

ITERATION = 0  # to 4
SELECTED_ALGORITHM = 0  # supervised
SELECTED_MODEL = 0  # ror
SELECTED_OPTIMIZATION_METHOD = 0  # adam
SELECTED_LEARNING_RATE = 0  # 1e-3

submission_directory = 'icra2019/'
experimental_entry = '{}/{}/{}/h{}e{}/{}_{}/{}_lr_{}/'.format(
    submission_directory,
    algorithms[SELECTED_ALGORITHM],
    ITERATION,
    horizons[ITERATION],
    episodes[ITERATION],
    teacher_name,
    model_names[SELECTED_MODEL],
    optimization_methods[SELECTED_OPTIMIZATION_METHOD],
    learning_rates[SELECTED_LEARNING_RATE]
)

def create_environment():
    environment = SimpleSimEnv(
        max_steps=math.inf,
        domain_rand=args.domain_rand,
        draw_curve=False,
        map_name=args.map_name
    )


def experiment_supervised():
    pass


def experiment_dagger():
    pass


def experiment_aggrevate():
    pass


def experiment_safe_dagger():
    pass


def experiment_upms():
    pass


if __name__ == '__main__':
    print('On the making...')

